<?php

/**
 * @file
 * Hook implementations for the forms_steps module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\forms_steps\Form\FormsStepsAlter;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\Core\Entity\ContentEntityType;

/**
 * Implements hook_help().
 */
function forms_steps_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'forms_steps.collection':
      // TODO: documentation and helps todo.
      $output = t('Forms Steps listed below are enabled.... See <a href=":url">the online documentation</a> for an introduction on how to use Forms Steps.', [
        ':url' => Url::fromRoute('forms_steps.collection')->toString(),
      ]);
      return $output;
  }
}

/**
 * Implements hook_form_alter().
 *
 * If this is a form managed by forms_steps we set the submit next route to the
 * form.
 */
function forms_steps_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $formStateStorage = $form_state->getStorage();
  if (
    preg_match('/^forms_steps\./', \Drupal::routeMatch()->getRouteName())
    && isset($formStateStorage['form_steps'])
  ) {
    $form['actions']['submit']['#submit'][] = 'Drupal\forms_steps\Form\FormsStepsAlter::setNextRoute';

    // Handle the forms steps.
    FormsStepsAlter::handle($form, $form_state);
  }
}

/**
 * Implements hook_entity_insert().
 */
function forms_steps_entity_insert(EntityInterface $entity) {
  \Drupal::service('forms_steps.workflow.manager')->entityInsert($entity);
}

/**
 * Implements hook_entity_presave().
 */
function forms_steps_entity_presave(EntityInterface $entity) {
  \Drupal::service('forms_steps.workflow.manager')->entityPreSave($entity);
}

/**
 * Implements hook_entity_base_field_info().
 */
function forms_steps_entity_base_field_info(ContentEntityType $entity_type) {
  if ($entity_type->id() === 'node') {
    // If we have moved to new workflow management. We no longer need this
    // field.
    if (drupal_get_installed_schema_version('forms_steps') === '8100') {
      $fields['field_forms_steps_id'] = BaseFieldDefinition::create(
        'string'
      )
        ->setLabel(t('Forms Steps ID'))
        ->setDisplayConfigurable('form', FALSE)
        ->setDisplayConfigurable('view', FALSE);

      return $fields;
    }
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Manage all form modes and define FormClass. Only managing nodes.
 */
function forms_steps_entity_type_build(array &$entity_types) {
  /** @var \Drupal\forms_steps\Service\FormsStepsManager $formsStepsManager */
  $formsStepsManager = \Drupal::service('forms_steps.manager');

  $available_entity_types = $formsStepsManager->getAllFormModesDefinitions();

  // We parse each entity type.
  foreach ($available_entity_types as $entity_type_id => $form_modes) {
    // We parse and set each form_mode.
    foreach ($form_modes as $form_mode) {
      $entity_types[$entity_type_id]->setFormClass(
        $form_mode,
        'Drupal\node\NodeForm'
      );
    }
  }
}
